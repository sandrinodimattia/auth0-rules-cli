#!/usr/bin/env node
const _ = require('lodash');
const fs = require('fs');
const chalk = require('chalk');
const program = require('commander');
program
  .option('-n, --name [name]', 'name of the rule')
  .option('-s, --stage [stage_name]', 'rule stage (login_success/login_failure/user_registration)')
  .option('-o, --order [number]', 'rule order')
  .option('-f, --file [filename]', 'filename of the local file')
  .parse(process.argv);
  
// Defaults.
if (!program.order) {
  program.order = 0;
}  
if (!program.stage) {
  program.stage = 'login_success';
}  
program.enabled = true;
  
if (!program.name || !program.file) {
  program.help();
  process.exit(1);
}
  
const nconf = require('nconf');
nconf.argv()
  .env()
  .file({ file: './config.json' });
  
console.log(chalk.blue(' Deploying rule:'), program.name);

try {
  const ManagementClient = require('auth0').ManagementClient;
  const management = new ManagementClient({
    token: nconf.get('AUTH0_API_TOKEN'),
    domain: nconf.get('AUTH0_DOMAIN')
  });

  management.rules.getAll({ stage: program.stage })
    .then((rules) => {
      var data = { 
        name: program.name, 
        script: fs.readFileSync(program.file, 'utf8'), 
        order: program.order, 
        enabled: program.enabled 
      };
      
      const rule = _.find(rules, { 'name': program.name });
      if (!rule) {
        data.stage = program.stage;
        return management.rules.create(data);
      } else {
        return management.rules.update({ id: rule.id }, data);
      }
    })
    .then((rule) => {
      console.log(chalk.green(' Rule saved:'), rule.id, '\n');
    })
    .catch((err) => {
      console.log(chalk.red(' Error: %s\n'), err.message || err.name || err.status);
    });
} catch(e) {
  console.log(chalk.red(' Error: %s\n'), e.message || e.name);
}